import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from flask import current_app
from flask_mail import Mail, Message
from datetime import datetime

mail = Mail()

def init_mail(app):
    """Initialize Flask-Mail with the app"""
    mail.init_app(app)

def send_alert_email(alert, endpoint):
    """Send alert email notification"""
    try:
        # Create email message
        subject = f"APIWatch Alert: {alert.alert_type.upper()} - {endpoint.name}"
        
        # Create HTML email body
        html_body = f"""
        <html>
        <body>
            <h2>ðŸš¨ APIWatch Alert</h2>
            <p><strong>Alert Type:</strong> {alert.alert_type.upper()}</p>
            <p><strong>API Endpoint:</strong> {endpoint.name}</p>
            <p><strong>URL:</strong> {endpoint.url}</p>
            <p><strong>Message:</strong> {alert.message}</p>
            <p><strong>Timestamp:</strong> {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
            <hr>
            <p><em>This alert was generated by APIWatch monitoring system.</em></p>
        </body>
        </html>
        """
        
        # Create plain text version
        text_body = f"""
        APIWatch Alert
        
        Alert Type: {alert.alert_type.upper()}
        API Endpoint: {endpoint.name}
        URL: {endpoint.url}
        Message: {alert.message}
        Timestamp: {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}
        
        This alert was generated by APIWatch monitoring system.
        """
        
        # Get alert emails from config
        alert_emails = current_app.config.get('ALERT_EMAILS', [])
        if not alert_emails:
            current_app.logger.warning("No alert emails configured")
            return False
        
        # Send email to each configured address
        for email in alert_emails:
            if email.strip():  # Skip empty emails
                msg = Message(
                    subject=subject,
                    recipients=[email.strip()],
                    html=html_body,
                    body=text_body
                )
                mail.send(msg)
                current_app.logger.info(f"Alert email sent to {email}")
        
        # Mark alert as email sent
        alert.email_sent = True
        from app.models import db
        db.session.commit()
        
        return True
        
    except Exception as e:
        current_app.logger.error(f"Failed to send alert email: {str(e)}")
        return False

def send_resolution_email(alert, endpoint):
    """Send resolution email when alert is resolved"""
    try:
        subject = f"APIWatch Resolution: {alert.alert_type.upper()} - {endpoint.name}"
        
        html_body = f"""
        <html>
        <body>
            <h2>âœ… APIWatch Alert Resolved</h2>
            <p><strong>Alert Type:</strong> {alert.alert_type.upper()}</p>
            <p><strong>API Endpoint:</strong> {endpoint.name}</p>
            <p><strong>URL:</strong> {endpoint.url}</p>
            <p><strong>Original Message:</strong> {alert.message}</p>
            <p><strong>Alert Created:</strong> {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
            <p><strong>Resolved At:</strong> {alert.resolved_at.strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
            <hr>
            <p><em>This resolution notification was generated by APIWatch monitoring system.</em></p>
        </body>
        </html>
        """
        
        text_body = f"""
        APIWatch Alert Resolved
        
        Alert Type: {alert.alert_type.upper()}
        API Endpoint: {endpoint.name}
        URL: {endpoint.url}
        Original Message: {alert.message}
        Alert Created: {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')}
        Resolved At: {alert.resolved_at.strftime('%Y-%m-%d %H:%M:%S UTC')}
        
        This resolution notification was generated by APIWatch monitoring system.
        """
        
        alert_emails = current_app.config.get('ALERT_EMAILS', [])
        if not alert_emails:
            return False
        
        for email in alert_emails:
            if email.strip():
                msg = Message(
                    subject=subject,
                    recipients=[email.strip()],
                    html=html_body,
                    body=text_body
                )
                mail.send(msg)
        
        return True
        
    except Exception as e:
        current_app.logger.error(f"Failed to send resolution email: {str(e)}")
        return False
