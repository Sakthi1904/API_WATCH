version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13
    container_name: apiwatch_db
    environment:
      POSTGRES_DB: apiwatch
      POSTGRES_USER: apiwatch
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - apiwatch_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U apiwatch -d apiwatch"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Application
  web:
    build: .
    container_name: apiwatch_web
    environment:
      - DATABASE_URL=postgresql://apiwatch:password@db:5432/apiwatch
      - SECRET_KEY=your-secret-key-change-in-production
      - MAIL_SERVER=smtp.gmail.com
      - MAIL_PORT=587
      - MAIL_USE_TLS=true
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DEFAULT_SENDER=${MAIL_DEFAULT_SENDER}
      - MONITORING_INTERVAL=60
      - LATENCY_THRESHOLD=5000
      - ALERT_EMAILS=${ALERT_EMAILS}
      - REQUEST_TIMEOUT=30
      - MAX_RETRIES=3
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - apiwatch_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/dashboard/stats"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:6-alpine
    container_name: apiwatch_redis
    ports:
      - "6379:6379"
    networks:
      - apiwatch_network
    restart: unless-stopped
    volumes:
      - redis_data:/data

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: apiwatch_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - apiwatch_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  apiwatch_network:
    driver: bridge 